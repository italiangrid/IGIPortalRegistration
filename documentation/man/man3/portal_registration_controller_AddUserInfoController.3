.TH "portal::registration::controller::AddUserInfoController" 3 "Wed Jul 13 2011" "Version 4" "Registration" \" -*- nroff -*-
.ad l
.nh
.SH NAME
portal::registration::controller::AddUserInfoController \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBUserInfo\fP \fBgetCommandObject\fP ()"
.br
.ti -1c
.RI "String \fBshowUserInfoForm\fP (RenderResponse response)"
.br
.ti -1c
.RI "void \fBinitBinder\fP (WebDataBinder binder)"
.br
.ti -1c
.RI "void \fBaddUserInfo\fP (@Valid @ModelAttribute \fBUserInfo\fP userInfo, BindingResult bindingResult, ActionRequest request, ActionResponse response, SessionStatus sessionStatus)  throws PortalException, SystemException "
.br
.ti -1c
.RI "List< \fBIdp\fP > \fBgetIdps\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBIdpService\fP \fBidpService\fP"
.br
.ti -1c
.RI "\fBUserInfoService\fP \fBuserInfoService\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 47 of file AddUserInfoController.java.
.SH "Member Function Documentation"
.PP 
.SS "void portal.registration.controller.AddUserInfoController.addUserInfo (@Valid @ModelAttribute \fBUserInfo\fPuserInfo, BindingResultbindingResult, ActionRequestrequest, ActionResponseresponse, SessionStatussessionStatus)  throws PortalException, SystemException "
.PP
Definition at line 74 of file AddUserInfoController.java.
.PP
References portal.registration.services.IdpService.findById(), portal.registration.services.UserInfoService.save(), and portal.registration.utils.MyValidator.validate().
.PP
.nf
                                                                {

                log.info('sono dentro');
                if (!bindingResult.hasErrors()) {

                        ArrayList<String> errors = new ArrayList<String>();
                        boolean allOk = true;

                        int userId = 0;
                        if (request.getParameter('useCondition').equals('true')) {
                                if (MyValidator.validate(userInfo, errors)) {

                                        log.info('Valore passato idp '
                                                        + Integer.parseInt(request.getParameter('idpId')));
                                        log.info('Valore passato havecert '
                                                        + request.getParameter('haveCert'));

                                        if (Integer.parseInt(request.getParameter('idpId')) != 0) {
                                                Idp idp = idpService.findById(Integer.parseInt(request
                                                                .getParameter('idpId')));
                                                userInfo.setIdp(idp);

                                                log.info('Settato idp '
                                                                + Integer.parseInt(request
                                                                                .getParameter('idpId')));

                                                try {

                                                        long companyId = PortalUtil.getCompanyId(request);
                                                        log.info('companyid = ' + companyId);
                                                        log.info('settate variabili di supporto ora si aggiunge un utenti a liferay!!');

                                                        User u = UserLocalServiceUtil.addUser(0L,
                                                                        companyId, false, 'settedByPortal',
                                                                        'settedByPortal', false, userInfo
                                                                                        .getUsername(), userInfo.getMail(),
                                                                        0L, '', new Locale('en'), userInfo
                                                                                        .getFirstName(), '', userInfo
                                                                                        .getLastName(), 0, 0, true,
                                                                        Calendar.JANUARY, 1, 1970, '', null, null,
                                                                        null, null, true, ServiceContextFactory
                                                                                        .getInstance(User.class.getName(),
                                                                                                        request));

                                                        if (u == null)
                                                                log.info('nulla di fatto');

                                                } catch (Exception e) {

                                                        errors.add('user-liferay-problem');
                                                        log.info('Inserimento utente in liferay' + e);
                                                        allOk = false;
                                                        request.setAttribute('firstReg', 'true');
                                                }

                                                if (allOk) {
                                                        try {

                                                                log.info('aggiunto utente in liferay, ora aggiungo in PortalUser');
                                                                userInfo.setRegistrationComplete('false');
                                                                userId = userInfoService.save(userInfo,
                                                                                Integer.parseInt(request
                                                                                                .getParameter('idpId')));

                                                                log.info('Utente aggiunto in PortalUsert con UserId = '
                                                                                + userId);

                                                        } catch (Exception e) {

                                                                errors.add('user-PortalUser-problem');
                                                                log.info('Inserimento utente in PortalUser');
                                                                e.printStackTrace();
                                                                allOk = false;
                                                        }
                                                }
                                        } else {

                                                errors.add('user-idp-problem');
                                                allOk = false;

                                        }

                                } else {

                                        allOk = false;
                                }

                                if (allOk) {

                                        SessionMessages.add(request, 'user-saved-successufully');

                                        if (request.getParameter('haveCert').equals('true')) {
                                                response.setRenderParameter('myaction',
                                                                'showUploadCert');
                                                request.setAttribute('userId', userId);
                                                request.setAttribute('username', userInfo.getUsername());
                                                request.setAttribute('firstReg', 'true');
                                        } else {
                                                response.setRenderParameter('myaction',
                                                                'showRequestCertificate');
                                        }

                                        sessionStatus.setComplete();

                                } else {

                                        errors.add('error-saving-registration');

                                        for (String error : errors) {
                                                log.info('Errore: ' + error);
                                                SessionErrors.add(request, error);
                                        }

                                        log.info('non va bene');

                                        response.setRenderParameter('myaction', 'addUserInfoForm');
                                        request.setAttribute('idpValue',
                                                        Integer.parseInt(request.getParameter('idpId')));
                                        request.setAttribute('userInfo', userInfo);
                                        request.setAttribute('checked',
                                                        request.getParameter('haveCert'));

                                        log.info('non va bene');
                                }
                        } else {
                                log.info('condizioni d'uso non accettate');
                                SessionErrors.add(request, 'use-condition-not-acepted');
                                response.setRenderParameter('myaction', 'userInfos');
                        }
                } else {

                        log.info('Errore errore');
                        response.setRenderParameter('myaction', 'addUserInfoForm');
                }

        }
.fi
.SS "\fBUserInfo\fP portal.registration.controller.AddUserInfoController.getCommandObject ()"
.PP
Definition at line 59 of file AddUserInfoController.java.
.PP
.nf
                                           {
                return new UserInfo();
        }
.fi
.SS "List<\fBIdp\fP> portal.registration.controller.AddUserInfoController.getIdps ()"
.PP
Definition at line 215 of file AddUserInfoController.java.
.PP
References portal.registration.services.IdpService.getAllIdp().
.PP
.nf
                                   {
                return idpService.getAllIdp();
        }
.fi
.SS "void portal.registration.controller.AddUserInfoController.initBinder (WebDataBinderbinder)"
.PP
Definition at line 69 of file AddUserInfoController.java.
.PP
.nf
                                                     {
                binder.registerCustomEditor(Long.class, new LongNumberEditor());
        }
.fi
.SS "String portal.registration.controller.AddUserInfoController.showUserInfoForm (RenderResponseresponse)"
.PP
Definition at line 64 of file AddUserInfoController.java.
.PP
.nf
                                                                {
                return 'addUserInfoForm';
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBIdpService\fP \fBportal.registration.controller.AddUserInfoController.idpService\fP\fC [private]\fP"
.PP
Definition at line 53 of file AddUserInfoController.java.
.SS "final Logger \fBportal.registration.controller.AddUserInfoController.log\fP\fC [static, private]\fP"\fBInitial value:\fP
.PP
.nf
 Logger
                        .getLogger(AddUserInfoController.class)
.fi
.PP
Definition at line 49 of file AddUserInfoController.java.
.SS "\fBUserInfoService\fP \fBportal.registration.controller.AddUserInfoController.userInfoService\fP\fC [private]\fP"
.PP
Definition at line 56 of file AddUserInfoController.java.

.SH "Author"
.PP 
Generated automatically by Doxygen for Registration from the source code.
