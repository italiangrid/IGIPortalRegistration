.TH "portal::registration::dao::FqanDAOImpl" 3 "Wed Jul 13 2011" "Version 4" "Registration" \" -*- nroff -*-
.ad l
.nh
.SH NAME
portal::registration::dao::FqanDAOImpl \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBportal.registration.dao.FqanDAO\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBsave\fP (\fBFqan\fP transientInstance)"
.br
.ti -1c
.RI "void \fBdelete\fP (\fBFqan\fP persistentInstance)"
.br
.ti -1c
.RI "\fBFqan\fP \fBfindById\fP (Integer id)"
.br
.ti -1c
.RI "List< \fBFqan\fP > \fBgetAllFqan\fP ()"
.br
.ti -1c
.RI "List< \fBFqan\fP > \fBfindByIdVo\fP (Integer id)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "SessionFactory \fBsessionFactory\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP = Logger.getLogger(FqanDAOImpl.class)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file FqanDAOImpl.java.
.SH "Member Function Documentation"
.PP 
.SS "void portal.registration.dao.FqanDAOImpl.delete (\fBFqan\fPpersistentInstance)"
.PP
Implements \fBportal.registration.dao.FqanDAO\fP.
.PP
Definition at line 35 of file FqanDAOImpl.java.
.PP
References portal.registration.dao.FqanDAOImpl.log, and portal.registration.dao.FqanDAOImpl.sessionFactory.
.PP
.nf
                                                    {
                log.debug('removing Fqan instance');
                try {
                        Session session = sessionFactory.getCurrentSession();
                        session.delete(persistentInstance);
                        log.debug('remove successful');
                } catch (RuntimeException re) {
                        log.error('remove failed', re);
                        throw re;
                }

        }
.fi
.SS "\fBFqan\fP portal.registration.dao.FqanDAOImpl.findById (Integerid)"
.PP
Implements \fBportal.registration.dao.FqanDAO\fP.
.PP
Definition at line 48 of file FqanDAOImpl.java.
.PP
References portal.registration.dao.FqanDAOImpl.log, and portal.registration.dao.FqanDAOImpl.sessionFactory.
.PP
.nf
                                         {
                log.debug('getting Idp instance with id: ' + id);
                try {
                        Session session = sessionFactory.getCurrentSession();
                        Fqan instance = (Fqan) session.get(Fqan.class, id);
                        log.debug('get successful');
                        return instance;
                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;
                }
        }
.fi
.SS "List<\fBFqan\fP> portal.registration.dao.FqanDAOImpl.findByIdVo (Integerid)"
.PP
Implements \fBportal.registration.dao.FqanDAO\fP.
.PP
Definition at line 80 of file FqanDAOImpl.java.
.PP
References portal.registration.dao.FqanDAOImpl.log, and portal.registration.dao.FqanDAOImpl.sessionFactory.
.PP
.nf
                                                 {
                log.debug('getting all Idp instance');
                try {

                        Session session = sessionFactory.getCurrentSession();

                        // Create a Hibernate query (HQL)
                        Query query = session.createQuery('FROM  Fqan WHERE idVo = ' + id);

                        // Retrieve all
                        return query.list();
                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;
                }
        }
.fi
.SS "List<\fBFqan\fP> portal.registration.dao.FqanDAOImpl.getAllFqan ()"
.PP
Implements \fBportal.registration.dao.FqanDAO\fP.
.PP
Definition at line 62 of file FqanDAOImpl.java.
.PP
References portal.registration.dao.FqanDAOImpl.log, and portal.registration.dao.FqanDAOImpl.sessionFactory.
.PP
.nf
                                       {
                log.debug('getting all Idp instance');
                try {

                        Session session = sessionFactory.getCurrentSession();

                        // Create a Hibernate query (HQL)
                        Query query = session.createQuery('FROM  Fqan');

                        // Retrieve all
                        return query.list();
                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;
                }
        }
.fi
.SS "void portal.registration.dao.FqanDAOImpl.save (\fBFqan\fPtransientInstance)"
.PP
Implements \fBportal.registration.dao.FqanDAO\fP.
.PP
Definition at line 22 of file FqanDAOImpl.java.
.PP
References portal.registration.dao.FqanDAOImpl.log, and portal.registration.dao.FqanDAOImpl.sessionFactory.
.PP
.nf
                                                 {
                log.debug('persisting Fqan instance');
                try {
                        Session session = sessionFactory.getCurrentSession();
                        session.save(transientInstance);
                        log.debug('persist successful');
                } catch (RuntimeException re) {
                        log.error('persist failed', re);
                        throw re;
                }

        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "final Logger \fBportal.registration.dao.FqanDAOImpl.log\fP = Logger.getLogger(FqanDAOImpl.class)\fC [static, private]\fP"
.PP
Definition at line 17 of file FqanDAOImpl.java.
.PP
Referenced by portal.registration.dao.FqanDAOImpl.delete(), portal.registration.dao.FqanDAOImpl.findById(), portal.registration.dao.FqanDAOImpl.findByIdVo(), portal.registration.dao.FqanDAOImpl.getAllFqan(), and portal.registration.dao.FqanDAOImpl.save().
.SS "SessionFactory \fBportal.registration.dao.FqanDAOImpl.sessionFactory\fP\fC [private]\fP"
.PP
Definition at line 20 of file FqanDAOImpl.java.
.PP
Referenced by portal.registration.dao.FqanDAOImpl.delete(), portal.registration.dao.FqanDAOImpl.findById(), portal.registration.dao.FqanDAOImpl.findByIdVo(), portal.registration.dao.FqanDAOImpl.getAllFqan(), and portal.registration.dao.FqanDAOImpl.save().

.SH "Author"
.PP 
Generated automatically by Doxygen for Registration from the source code.
