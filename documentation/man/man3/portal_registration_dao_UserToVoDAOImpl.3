.TH "portal::registration::dao::UserToVoDAOImpl" 3 "Wed Jul 13 2011" "Version 4" "Registration" \" -*- nroff -*-
.ad l
.nh
.SH NAME
portal::registration::dao::UserToVoDAOImpl \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBportal.registration.dao.UserToVoDAO\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBsave\fP (\fBUserToVo\fP transientInstance)"
.br
.ti -1c
.RI "List< \fBUserToVo\fP > \fBfindById\fP (\fBUserInfo\fP userInfo)"
.br
.ti -1c
.RI "\fBVo\fP \fBgetVoByUserToVo\fP (\fBUserToVo\fP userToVo)"
.br
.ti -1c
.RI "void \fBdelete\fP (int userId, int idVo)"
.br
.ti -1c
.RI "\fBUserToVo\fP \fBfindByIds\fP (int userId, int idVo)"
.br
.ti -1c
.RI "void \fBupdate\fP (\fBUserToVo\fP temp)"
.br
.ti -1c
.RI "int \fBgetNumberOfUserToVo\fP (int userId)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "SessionFactory \fBsessionFactory\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP = Logger.getLogger(UserToVoDAOImpl.class)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 19 of file UserToVoDAOImpl.java.
.SH "Member Function Documentation"
.PP 
.SS "void portal.registration.dao.UserToVoDAOImpl.delete (intuserId, intidVo)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 74 of file UserToVoDAOImpl.java.
.PP
References portal.registration.dao.UserToVoDAOImpl.findByIds(), portal.registration.dao.UserToVoDAOImpl.log, and portal.registration.dao.UserToVoDAOImpl.sessionFactory.
.PP
.nf
                                                 {
                log.debug('getting all Certificate instance of user');
                try {

                        Session session = sessionFactory.getCurrentSession();

                        // Create a Hibernate query (HQL)
                        UserToVo utv = findByIds(userId, idVo);
                        session.delete(utv);
                        session.flush();
                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;
                }

        }
.fi
.SS "List<\fBUserToVo\fP> portal.registration.dao.UserToVoDAOImpl.findById (\fBUserInfo\fPuserInfo)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 42 of file UserToVoDAOImpl.java.
.PP
References portal.registration.dao.UserToVoDAOImpl.log, and portal.registration.dao.UserToVoDAOImpl.sessionFactory.
.PP
.nf
                                                          {
                log.debug('getting all Certificate instance of user');
                try {

                        Session session = sessionFactory.getCurrentSession();

                        // Create a Hibernate query (HQL)
                        Query query = session.createQuery('FROM  UserToVo WHERE userId = '
                                        + userInfo.getUserId());

                        // Retrieve all
                        return query.list();
                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;
                }
        }
.fi
.SS "\fBUserToVo\fP portal.registration.dao.UserToVoDAOImpl.findByIds (intuserId, intidVo)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 91 of file UserToVoDAOImpl.java.
.PP
References portal.registration.dao.UserToVoDAOImpl.log, and portal.registration.dao.UserToVoDAOImpl.sessionFactory.
.PP
Referenced by portal.registration.dao.UserToVoDAOImpl.delete().
.PP
.nf
                                                        {
                log.debug('getting all Certificate instance of user');
                try {

                        Session session = sessionFactory.getCurrentSession();

                        UserToVoId userToVoId = new UserToVoId(userId, idVo);

                        // Create a Hibernate query (HQL)
                        return (UserToVo) session.get(UserToVo.class, userToVoId);

                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;

                }
        }
.fi
.SS "int portal.registration.dao.UserToVoDAOImpl.getNumberOfUserToVo (intuserId)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 132 of file UserToVoDAOImpl.java.
.PP
References portal.registration.dao.UserToVoDAOImpl.log, and portal.registration.dao.UserToVoDAOImpl.sessionFactory.
.PP
.nf
                                                   {
                log.debug('getting the number of Vo fo userId = ' + userId);
                try {

                        Session session = sessionFactory.getCurrentSession();
                        int count = 0;
                        String SQL_QUERY = 'SELECT count(*) FROM UserToVo WHERE userId = '
                                        + userId;
                        Query query = session.createQuery(SQL_QUERY);
                        for (Iterator it = query.iterate(); it.hasNext();) {
                                it.next();
                                count++;
                        }

                        return count;

                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;

                }
        }
.fi
.SS "\fBVo\fP portal.registration.dao.UserToVoDAOImpl.getVoByUserToVo (\fBUserToVo\fPuserToVo)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 60 of file UserToVoDAOImpl.java.
.PP
References portal.registration.domain.UserToVo.getVo(), portal.registration.dao.UserToVoDAOImpl.log, and portal.registration.dao.UserToVoDAOImpl.sessionFactory.
.PP
.nf
                                                     {
                log.debug('getting all Certificate instance of user');
                try {

                        Session session = sessionFactory.getCurrentSession();

                        return (Vo) session.get(Vo.class,
                                        session.getIdentifier(userToVo.getVo()));
                } catch (RuntimeException re) {
                        log.error('get failed', re);
                        throw re;
                }
        }
.fi
.SS "void portal.registration.dao.UserToVoDAOImpl.save (\fBUserToVo\fPtransientInstance)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 26 of file UserToVoDAOImpl.java.
.PP
References portal.registration.dao.UserToVoDAOImpl.log, and portal.registration.dao.UserToVoDAOImpl.sessionFactory.
.PP
.nf
                                                     {
                log.debug('persisting UserInfo instance');
                try {
                        Session session = sessionFactory.getCurrentSession();
                        session.save(transientInstance);
                        //
                        session.flush();
                        session.refresh(transientInstance);
                        log.debug('persist successful');
                } catch (RuntimeException re) {
                        log.error('persist failed', re);
                        throw re;
                }
        }
.fi
.SS "void portal.registration.dao.UserToVoDAOImpl.update (\fBUserToVo\fPtemp)"
.PP
Implements \fBportal.registration.dao.UserToVoDAO\fP.
.PP
Definition at line 109 of file UserToVoDAOImpl.java.
.PP
References portal.registration.domain.UserToVo.getFqans(), portal.registration.domain.UserToVo.getId(), portal.registration.domain.UserToVo.getIsDefault(), portal.registration.domain.UserToVo.getUserInfo(), portal.registration.domain.UserToVo.getVo(), portal.registration.dao.UserToVoDAOImpl.log, portal.registration.dao.UserToVoDAOImpl.sessionFactory, portal.registration.domain.UserToVo.setFqans(), portal.registration.domain.UserToVo.setIsDefault(), portal.registration.domain.UserToVo.setUserInfo(), and portal.registration.domain.UserToVo.setVo().
.PP
.nf
                                          {
                log.debug('Editing existing userToVo');

                // Retrieve session from Hibernate
                Session session = sessionFactory.getCurrentSession();

                // Retrieve existing userInfo via id
                UserToVo existingUTV = (UserToVo) session.get(UserToVo.class,
                                temp.getId());

                // Assign updated values to this userInfo
                existingUTV.setFqans(temp.getFqans());
                existingUTV.setIsDefault(temp.getIsDefault());
                existingUTV.setUserInfo(temp.getUserInfo());
                existingUTV.setVo(temp.getVo());

                // Save updates
                session.save(existingUTV);
                session.flush();
                session.refresh(existingUTV);
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "final Logger \fBportal.registration.dao.UserToVoDAOImpl.log\fP = Logger.getLogger(UserToVoDAOImpl.class)\fC [static, private]\fP"
.PP
Definition at line 21 of file UserToVoDAOImpl.java.
.PP
Referenced by portal.registration.dao.UserToVoDAOImpl.delete(), portal.registration.dao.UserToVoDAOImpl.findById(), portal.registration.dao.UserToVoDAOImpl.findByIds(), portal.registration.dao.UserToVoDAOImpl.getNumberOfUserToVo(), portal.registration.dao.UserToVoDAOImpl.getVoByUserToVo(), portal.registration.dao.UserToVoDAOImpl.save(), and portal.registration.dao.UserToVoDAOImpl.update().
.SS "SessionFactory \fBportal.registration.dao.UserToVoDAOImpl.sessionFactory\fP\fC [private]\fP"
.PP
Definition at line 24 of file UserToVoDAOImpl.java.
.PP
Referenced by portal.registration.dao.UserToVoDAOImpl.delete(), portal.registration.dao.UserToVoDAOImpl.findById(), portal.registration.dao.UserToVoDAOImpl.findByIds(), portal.registration.dao.UserToVoDAOImpl.getNumberOfUserToVo(), portal.registration.dao.UserToVoDAOImpl.getVoByUserToVo(), portal.registration.dao.UserToVoDAOImpl.save(), and portal.registration.dao.UserToVoDAOImpl.update().

.SH "Author"
.PP 
Generated automatically by Doxygen for Registration from the source code.
