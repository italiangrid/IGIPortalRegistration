.TH "portal::registration::utils::MyValidator" 3 "Wed Jul 13 2011" "Version 4" "Registration" \" -*- nroff -*-
.ad l
.nh
.SH NAME
portal::registration::utils::MyValidator \- 
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static boolean \fBvalidate\fP (\fBUserInfo\fP target, List< String > errors)  throws SystemException "
.br
.ti -1c
.RI "static boolean \fBvalidateCert\fP (String pwd, String pwd1, String pwd2, List< String > errors)  throws SystemException "
.br
.ti -1c
.RI "static boolean \fBvalidateUpdate\fP (\fBUserInfo\fP target, \fBUserInfo\fP check, List< String > errors)  throws SystemException "
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static final Logger \fBlog\fP = Logger.getLogger(MyValidator.class)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 13 of file MyValidator.java.
.SH "Member Function Documentation"
.PP 
.SS "static boolean portal.registration.utils.MyValidator.validate (\fBUserInfo\fPtarget, List< String >errors)  throws SystemException \fC [static]\fP"
.PP
Definition at line 17 of file MyValidator.java.
.PP
References portal.registration.utils.MyValidator.log.
.PP
Referenced by portal.registration.controller.AddUserInfoController.addUserInfo().
.PP
.nf
                                               {
                boolean result = true;

                if (Validator.isNull(target.getFirstName())) {
                        errors.add('user-first-name-required');
                        result = false;
                        log.info('nome sbagliato');
                }

                if (Validator.isNull(target.getLastName())) {
                        errors.add('user-last-name-required');
                        result = false;
                        log.info('cognome sbagliato');
                }

                if (Validator.isNull(target.getInstitute())) {
                        errors.add('user-institute-required');
                        result = false;
                        log.info('istituto sbagliato');
                }

                if (Validator.isNull(target.getMail())) {
                        errors.add('user-mail-required');
                        result = false;
                        log.info('mail sbagliato');
                }

                if (Validator.isNotNull(target.getMail())) {
                        if (!Validator.isEmailAddress(target.getMail())) {
                                errors.add('user-valid-mail-required');
                                result = false;
                                log.info('mail invalida sbagliato');
                        }
                }

                if (Validator.isNull(target.getUsername())) {
                        errors.add('user-username-required');
                        result = false;
                        log.info('usename vuoto sbagliato');
                }

                if (Validator.isNotNull(target.getPhone())) {
                        if (!Validator.isPhoneNumber(target.getPhone())) {
                                errors.add('user-phone-valid');
                                result = false;
                                log.info('telefono sbagliato');
                        }
                }

                List<User> liferayUsers = UserLocalServiceUtil.getUsers(0,
                                UserLocalServiceUtil.getUsersCount());

                for (int i = 0; i < UserLocalServiceUtil.getUsersCount(); i++) {
                        if (liferayUsers.get(i).getScreenName()
                                        .equals(target.getUsername())) {
                                errors.add('user-username-duplicate');
                                result = false;
                                log.info('username duplicato sbagliato');
                        }
                        if (liferayUsers.get(i).getEmailAddress().equals(target.getMail())) {
                                errors.add('user-mail-duplicate');
                                result = false;
                                log.info('mail duplicato sbagliato ' + target.getMail() + ' = '
                                                + liferayUsers.get(i).getEmailAddress());
                        }
                }

                return result;
        }
.fi
.SS "static boolean portal.registration.utils.MyValidator.validateCert (Stringpwd, Stringpwd1, Stringpwd2, List< String >errors)  throws SystemException \fC [static]\fP"
.PP
Definition at line 88 of file MyValidator.java.
.PP
References portal.registration.utils.MyValidator.log.
.PP
Referenced by portal.registration.controller.UploadCertController.uploadCert().
.PP
.nf
                                                                    {
                boolean result = true;

                if (!pwd1.equals(pwd2)) {
                        errors.add('cert-password-incorrect');
                        result = false;
                        log.info('Le Password devono essere uguali');
                }

                if (Validator.isNull(pwd)) {
                        errors.add('key-pass-required');
                        result = false;
                        log.info('Inserire Password');
                }

                if (Validator.isNull(pwd1)) {
                        errors.add('cert-pass1-required');
                        result = false;
                        log.info('Inserire Password');
                }

                if (Validator.isNull(pwd2)) {
                        errors.add('cert-pass2-required');
                        result = false;
                        log.info('Inserire Password di controllo');
                }

                return result;
        }
.fi
.SS "static boolean portal.registration.utils.MyValidator.validateUpdate (\fBUserInfo\fPtarget, \fBUserInfo\fPcheck, List< String >errors)  throws SystemException \fC [static]\fP"
.PP
Definition at line 119 of file MyValidator.java.
.PP
References portal.registration.utils.MyValidator.log.
.PP
Referenced by portal.registration.controller.EditUserInfoController.editUserInfo().
.PP
.nf
                                                                    {
                boolean result = true;

                if (Validator.isNull(target.getFirstName())) {
                        errors.add('user-first-name-required');
                        result = false;
                        log.info('nome sbagliato');
                }

                if (Validator.isNull(target.getLastName())) {
                        errors.add('user-last-name-required');
                        result = false;
                        log.info('cognome sbagliato');
                }

                if (Validator.isNull(target.getInstitute())) {
                        errors.add('user-institute-required');
                        result = false;
                        log.info('istituto sbagliato');
                }

                if (Validator.isNull(target.getMail())) {
                        errors.add('user-mail-required');
                        result = false;
                        log.info('mail sbagliato');
                }
                if (!target.getMail().equals(check.getMail())) {
                        result = false;
                        errors.add('user-mail-must-same');
                }

                if (Validator.isNotNull(target.getMail())) {
                        if (!Validator.isEmailAddress(target.getMail())) {
                                errors.add('user-valid-mail-required');
                                result = false;
                                log.info('mail invalida sbagliato');
                        }
                }

                if (Validator.isNull(target.getUsername())) {
                        errors.add('user-username-required');
                        result = false;
                        log.info('usename vuoto sbagliato');
                }
                if (!target.getUsername().equals(check.getUsername())) {
                        result = false;
                        errors.add('user-username-must-same');
                }

                if (Validator.isNotNull(target.getPhone())) {
                        if (!Validator.isPhoneNumber(target.getPhone())) {
                                errors.add('user-phone-valid');
                                result = false;
                                log.info('telefono sbagliato');
                        }
                }

                return result;
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "final Logger \fBportal.registration.utils.MyValidator.log\fP = Logger.getLogger(MyValidator.class)\fC [static, private]\fP"
.PP
Definition at line 15 of file MyValidator.java.
.PP
Referenced by portal.registration.utils.MyValidator.validate(), portal.registration.utils.MyValidator.validateCert(), and portal.registration.utils.MyValidator.validateUpdate().

.SH "Author"
.PP 
Generated automatically by Doxygen for Registration from the source code.
